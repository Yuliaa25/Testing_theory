Задание 4

Что такое Тест дизайн?
Для чего нужны Техники тест дизайна?
Какие знаете техники черного ящика?/Опишите их.
Какие знаете техники белого ящика?/Опишите их
Что такое Тест дизайн?

Тест-дизайн — это процесс разработки техник и методов тестирования. 

Цель тест дизайна – оптимизировать проверку функциональности программы, найти ошибки и убедиться, что она соответствует требованиям.

Для чего нужны Техники тест дизайна?

Техники тест-дизайна необходимы для структурирования процесса тестирования.

Главная задача тест-дизайна — подготовить рабочую документацию, то есть разработать сценарии, которые позволят протестировать максимальное количество функций за минимальное время.

Какие знаете техники черного ящика? Опишите их.

Тестирование черного ящика — это метод тестирования программного обеспечения, который проверяет функциональность системы без знания ее внутренней структуры. 
Существуют следующие техники тест-дизайна “черного ящика”:
Эквивалентное разбиение
Анализ граничных значений
Анализ причинно-следственных связей
Тестирование по сценариям использования
Исчерпывающее тестирование
Таблица принятия решений
Тестирование состояний и переходов
Комбинаторные техники:
Метод парного тестирования 
Базовый выбор
Каждый выбор
Ортогональные матрицы
Основанные на опыте: 
Техника предугадывания ошибок
Исследовательское тестирование
На основе чек-листов

Эквивалентное разбиение

это тестирование в котором тестовые условия представлены эквивалентными областями, проверяемыми на одном представителе каждой области.
Суть техники эквивалентного разбиения в том, чтобы:
Разделить данные на группы (классы эквивалентности), которые, как предполагается, обрабатываются системой схожим образом (то есть ведут систему к одному состоянию);
Из каждой группы (класса) выбрать одно значение и проверить его.


Классы эквивалентности могут быть:


Линейные - упорядоченное множество на числовой прямой (цифры)
Нелинейные - неупорядоченное множество данных, не имеющих граничных значений (буквы, спецсимволы, валюта и др)


Валидные - допустимые значения исходя из требований, позитивные тесты
           Невалидные - недопустимые значения, негативные тесты



Анализ граничных значений 

это тестирование проводится на границах допустимых входных значений, чтобы найти ошибки, возникающие при работе на граничных значениях.
Проще говоря, граничные значения — это те места, в которых один класс эквивалентности переходит в другой.
Цель этой техники — найти ошибки, связанные с граничными значениями. На каждой границе диапазона следует проверить по три значения:
граничное значение;
значение перед границей;
значение после границы.


Анализ причинно-следственных связей 
Этот метод используется в тестировании для определения комбинаций условий (причин), которые могут привести к определенному результату (следствию) в системе. 
Проще говоря, это простая проверка базовых действий и их результата. 


Например, если нажать крестик в правом верхнем углу окна (причина), оно закроется (следствие), и т.д. Этот метод позволяет проверить все возможности системы, а также обнаружить баги и улучшить техническую документацию продукта.


Использование техники на примере “записной книжки”: 
После ввода всех данных нового контакта и нажатия кнопки Создать (причина) приложение должно автоматически создать карточку с номером телефона, фотографией и ФИО человека (следствие). 
Тесты покажут, можно ли оставлять одно или несколько полей пустыми, распознает ли система кириллицу, латиницу или оба алфавита, а также другие параметры.
Тестирование по сценариям использования

Это подход, при котором система тестируется на основе реальных пользовательских сценариев, которые описывают, как люди взаимодействуют с программой. Тестировщики создают пошаговые инструкции для сценариев, начиная с момента входа в систему до выполнения конкретной задачи.

Цель этого типа тестирования — убедиться, что каждая функциональная часть программы работает так, как ожидается в реальных условиях. Тестирование по сценариям помогает обнаружить проблемы, которые могут возникнуть в процессе обычного использования, а не только в отдельных функциональных тестах.
Пример сценария использования
Например, пользователь хочет купить товар в интернет-магазине. Сценарий может включать поиск товара, добавление его в корзину, ввод информации для оплаты, подтверждение заказа, получение подтверждения на email. Этот сценарий тестируется от начала до конца.
Ключевые компоненты сценария использования

Актор (пользователь)
Это либо человек (конечный пользователь), либо система, которая взаимодействует с программным обеспечением. Важно учитывать разные типы пользователей — например, новый пользователь, опытный пользователь, администратор системы и т.д.
Система
Это программное обеспечение или приложение, которое тестируется. Система должна корректно обрабатывать запросы и действия пользователя на каждом этапе сценария.
Шаги (последовательность действий)
Сценарий использования состоит из шагов, которые пользователь предпринимает для достижения своей цели. Например:
Вход в систему.
Поиск товара.
Добавление товара в корзину.
Оплата.
Получение подтверждения.
Ожидаемый результат
Для каждого шага тестировщик определяет, что должно произойти. Например, при добавлении товара в корзину пользователь должен увидеть сообщение о том, что товар успешно добавлен.

Преимущества тестирования по сценариям использования

Реалистичность
Сценарии основаны на реальных действиях пользователей. Это помогает идентифицировать проблемы, которые могут быть не видны при тестировании отдельных модулей. Например, система может работать корректно по отдельности, но при выполнении полного сценария могут возникнуть сбои.
Легкость в понимании
Сценарии описывают простые шаги, которые понятны не только тестировщикам, но и другим членам команды, например, разработчикам или менеджерам. Это делает тестирование прозрачным и более доступным для обсуждения в команде.
Эффективность
Тестирование по сценариям позволяет проверить сразу несколько функциональностей в одном тесте. Это помогает сэкономить время и ресурсы, а также обнаружить баги, которые могут возникнуть при взаимодействии разных частей системы.
Когда применять:
На ранних этапах разработки
Тестирование можно проводить уже на первых стадиях разработки, чтобы проверить ключевые сценарии, такие как регистрация пользователей или процесс покупки, и убедиться, что они работают стабильно.
При изменении системы
Сценарии использования особенно полезны при тестировании после внесения изменений в систему, будь то добавление нового функционала или исправление багов. Это позволяет убедиться, что существующие пользовательские потоки не нарушены.
При разработке пользовательских интерфейсов (UI/UX)
Тестирование сценариев помогает оценить, насколько интуитивно понятен интерфейс для пользователя и насколько эффективно можно выполнять задачи. Например, если новый интерфейс слишком сложен, пользователь может столкнуться с трудностями при выполнении простых задач.



Исчерпывающее тестирование

это метод тестирования, который включает проверку всех возможных комбинаций входных данных и состояний системы. 
Исчерпывающее тестирование имеет следующие преимущества:
Тесты могут быть автоматизированы, что избавит от необходимости проводить работу вручную.
Проверяет все возможные варианты данных в наборе.
Делает программу более надежной, выявляя любые возможные ошибки.
Выполняет повторное тестирование задач с высоким приоритетом.
Повышает удовлетворенность клиентов от продукта.
На практике исчерпывающее тестирование редко возможно из-за следующих причин:
Время и ресурсы: Проверка всех возможных комбинаций может занять огромное количество времени и ресурсов.
Практическая невозможность: В реальных системах количество возможных комбинаций может быть настолько велико, что их проверка становится практически невозможной.
Поэтому в большинстве случаев применяются более эффективные методы тестирования, такие как выборочное тестирование, тестирование на основе рисков и другие подходы, которые позволяют покрыть наиболее критичные сценарии с меньшими затратами времени и ресурсов.


Пример:
Условие
Тест 1
Тест 2
Тест 3
Тест 4
Тест 5
Тест 6
Тест 7
Тест 8
Тест 9
Выходной день
истина
-
-
-
истина
-
истина
-


Будний день
-
истина
-
-
-
истина


истина


День Масленицы
-
-
истина
-
истина
истина




истина
День Рождения
-
-
-
истина
-
-
истина
истина
истина
Действие


















Скидка 10%






X




X
X


Скидка 5 %
X

















Скидка 15 %




X


X
X




X
Скидка 0 %


X

















Таблица принятия решений 
это метод тестирования программного обеспечения, используемый для проверки поведения системы при различных комбинациях входных данных.
Таблица решений представляет собой табличное представление входных данных в сравнении с правилами/случаями/условиями тестирования.

Цель тестирования по этой методике — повысить общее тестовое покрытие, не упуская все (возможные) комбинации.

Таблица решений — это двухмерная матрица, в которой есть четыре компонента: Заголовок условия (condition stub), Заголовок действия (action stub), Условие (condition entry), и Действие (action entry)
try
).Существует несколько видов таблиц принятия решений:

Таблицы с ограниченным вводом — условия в этой категории ограничены. Например, «Истина» или «Ложь».
Таблицы с расширенным вводом — условия могут иметь более двух значений, кроме «Истина» или «Ложь».
Вот некоторые общие обозначения, используемые в таблицах принятия решений.
«Y» может использоваться для обозначения «Истины (True)». Можно использовать «И», «T» или «1».
«N» означает «Ложь (False)». Также допускается использование обозначений «Л», «F» или «0». 
«—» или «N/A» указывает, что условие не имеет значения.

Например, осуществление входа в систему:

При входе в систему таблица принятия решений может состоять из таких данных, как имя пользователя и пароль. Можно добавить дополнительные условия, например, неверный пароль или имя пользователя. Если вводимая информация не соответствует реальным учетным данным пользователя, таблица может показать сообщение об ошибке в качестве результата. 


Тест 1: имя пользователя и пароль корректны.
Тест 2: корректное имя пользователя, но неверный пароль.
Тест 3: неверное имя пользователя, но корректный пароль.
Тест 4: неверное имя пользователя и пароль.

Тестирование с помощью таблиц принятия решений является одной из наиболее эффективных техник тестирования ПО. Её можно использовать в различных сценариях и контекстах. К тому же табличное представление помогает анализировать бизнес-логику продукта. 

Тестирование таблиц принятий решений подходит как для маленьких, так и крупных компаний и позволяет использовать большое количество входных данных.

Тестирование состояний и переходов 
изучает, как система переходит из одного состояния в другое в ответ на события

Состояния — это различные условия (или режимы), в которых может находиться система. Определенные события вызывают («триггерят») переходы — перемещения между этими состояниями

Тестирование переходов между состояниями полезно для систем с четкой последовательностью состояний и событий. 

Метод позволяет улучшить тестовое покрытие и выявить потенциальные дефекты в системах, где изменения состояний следуют в четко определенной последовательности. 

Например, у нас есть программа управления светофорами, которая меняет режим работы светофоров в зависимости от времени суток, интенсивности дорожного движения и количества пешеходов. Тестирование переходов состояний поможет убедиться, что система правильно реагирует на различные комбинации этих факторов.
Диаграммы перехода состояний: визуальное представление техники тест-дизайна
Мы визуализируем тестирование переходов состояний с помощью диаграмм переходов состояний. Эти диаграммы обеспечивают графическое представление состояний, переходов, событий и действий системы.

Диаграммы переходов состоят из состояний, представленных прямоугольниками, переходов, представленных в виде стрелок между состояниями, событий, вызывающих переходы, и действий, связанных с переходами:

Кружки обозначают начальное и конечное состояние.



Комбинаторные техники:

это метод тестирования программного обеспечения, который позволяет эффективно обнаруживать ошибки, связанные с взаимодействием различных параметров и настроек системы. 

При этом методе тестирования создаются комбинации входных данных, которые покрывают все возможные комбинации параметров.

Метод парного тестирования (Pairwise testing)

при данной технике тест-кейсы создаются таким образом, чтобы выполнить все возможные отдельные комбинации каждой пары входных параметров.

Метод попарного тестирования базируется на гипотезе, что подавляющее большинство дефектов ПО возникает, когда взаимодействуют два входных параметра. Следовательно, надо проверить не все возможные комбинации параметров, а только такой набор комбинаций, в котором каждая пара параметров встретится хотя бы раз. Таким образом, техника попарного тестирования позволяет значительно сэкономить на количестве тестов.

Преимущества: Эффективное использование ресурсов, Повышение качества продукта, Сокращение времени до выхода на рынок, Снижение рисков
Недостатки: Недостаточное покрытие, Сложность выбора параметров, Необходимость автоматизации

Пример: приложение для заказа еды, которое предлагает разные варианты для пользователя. 

Эти варианты включают:

Тип кухни (итальянская, японская, грузинская).
Способ доставки (курьер, самовывоз).
Оплата (наличными, картой).
Всего у нас есть 12 (3*2*2) возможных комбинаций, которые могут возникнуть при взаимодействии этих параметров. Однако применение попарного тестирования позволяет уменьшить количество тестовых случаев до 6-ти без потери качества проверки.
Итальянская
Курьер
Наличные


1
1
Итальянская
  2.    Самовывоз
  2.    Картой


1
2
  2.    Японская
Курьер
  2.    Картой


2
1
  2.     Японская
  2.    Самовывоз
Наличные


2
2
  3.     Грузинская
Курьер
Наличные


3
1
  3.     Грузинская
  2.    Самовывоз
  2.     Картой


3
2


Базовый выбор

одна из комбинаторных техник тест-дизайна, которая ориентирована на выбор базового набора тестовых значений для каждой переменной, а затем создание тестовых случаев путем изменения только одной переменной за раз, оставляя остальные на базовом уровне.

Основные шаги:
Определение базового набора значений: Для каждой входной переменной выбирается "базовое" значение. Это значение обычно выбирается как наиболее типичное или наименее рискованное.
Создание тестового случая для базового набора: Создается один тестовый случай, который использует базовые значения для всех входных переменных.
Варьирование значений: Для каждой входной переменной создается отдельный тестовый случай, в котором эта переменная принимает одно из своих альтернативных значений, в то время как все остальные переменные остаются на базовом уровне.

Преимущества:
Простота реализации и понимания
Эффективность в тестировании большинства критичных путей и вариантов.
Недостатки:
Может не покрывать некоторые сложные взаимодействия между переменными.
Не всегда гарантирует максимальное покрытие всех возможных комбинаций.
Техника базового выбора полезна, когда нужно быстро и эффективно создать набор тестов, особенно в ситуациях, когда полное покрытие всех возможных комбинаций не требуется или невозможно.

Пример,тестирование формы регистрации пользователя

Исходные данные: 							          
    Форма регистрации, которая имеет следующие поля:			
Тип аккаунта (Account Type): 						
Варианты: Личный (Personal), Бизнес (Business)			         
Язык (Language):
Варианты: Русский (Russian), Английский (English)
Метод уведомления (Notification Method):
Варианты: Электронная почта (Email), СМС (SMS)

Основные шаги: 
Определение базового набора значений
Создание тестового случая
Варьирование значений

Тестовый случай
Тип аккаунта 
Язык 
Метод уведомления
Комментарий
1 (Базовый)
Личный (Personal)
Русский (Russian)
Электронная почта (Email)
Все значения установлены на базовые.
2
Бизнес (Business)
Русский (Russian)
Электронная почта (Email)
Изменен только Тип аккаунта.
3
Личный (Personal)
Английский (English)
Электронная почта (Email)
Изменен только Язык.
4
Личный (Personal)
Русский (Russian)
СМС (SMS)
Изменен только Метод уведомления.


Каждый выбор

эта стратегия требует, чтобы каждое значение каждого параметра было включено по крайней мере в один тестовый пример.
Плюсы: легкость применения.
Минусы: минимальное покрытие.
Пример:
В магазине бытовой техники планируют продавать товары следующих категорий: холодильники, морозильные камеры стиральные и сушильные машины. Доступны следующие бренды: Haier, Lg, Bosch, Hotpoint, Indesit, Leran и Atlant. Также существует возможность выбора способа доставки: самовывоз, доставка.
Согласно тексту задания, можно выделить следующие параметры:

Категория
Брэнд
Способ получения
Холодильник
Haier
Самовывоз
Морозильная камера
Lg
Доставка
Стиральная машина
Bosch


Сушильная машина
Hotpoint




Indesit




Leran




Atlant




Если выполнять проверку всех возможных комбинаций, то получаем 4*7*2=56 проверок.

Применим технику каждого выбора. Эта техника означает, что каждое значение каждого конкретного параметра должно быть использовано по крайней мере один раз в тестовом наборе. Таким образом, результирующее количество случаев будет равно количеству значений параметра с наибольшим диапазоном. Каждый выбор представляет собой технику минимального покрытия. Получаем 7 проверок.

№ 
Категория
Брэнд
Способ получения
1
Холодильник
Haier
Самовывоз
2
Морозильная камера
Lg
Доставка
3
Стиральная машина
Bosch
Самовывоз
4
Сушильная машина
Hotpoint
Доставка
5
Холодильник
Indesit
Самовывоз
6
Морозильная камера
Leran
Доставка
7
Стиральная машина
Atlant
Самовывоз


Ортогональные матрицы

- это таблица, обладающая следующими свойствами:
 Любые два столбца таблицы содержат все комбинации значений этих столбцов.
 Если какая-либо пара значений двух столбцов встречается несколько раз, то все возможные парные комбинации значений этих столбцов должны встретиться столько же раз.
Т.е. в отличие от механизма all pairs, в основе которого лежит фокус на том, чтобы каждая возможная пара значений для двух параметров была проверена хотя бы один раз, ортогональные массивы обеспечивают более равномерное и полное покрытие. Количество тестов может быть больше, чем в попарном тестировании, но все равно значительно меньше, чем при полном переборе всех возможных комбинаций. 

Названия ортогональных таблиц записываются в виде следующей формулы:

Существуют так называемые смешанные (mixed) ортогональные массивы, где столбцы могут принимать разное количество значений. Например, L18(2137) – смешанный ортогональный массив с восемнадцатью строками, у которого один столбец со значениями 1 и 2, и семь столбцов со значениями 1, 2, 3.


ОСНОВАННЫЕ НА ОПЫТЕ

это методы, которые полагаются на знания и опыт тестировщика. 

Они включают в себя исследовательское тестирование, предсказание ошибок, а также анализ и моделирование использования.
Техника предугадывания ошибок
 Тестирование направлено на обнаружение типичных ошибок, которые могут быть допущены разработчиками.
Это одна из методик тестирования программного обеспечения, основанная на опыте и интуиции тестировщика. Техника не требует строгих формальных правил и документации, но предполагает наличие у тестировщика знания системы и понимания того, где и как могут возникнуть ошибки. 

Она основывается на опыте предыдущих тестирований и знаниях о типичных ошибках, которые часто возникают в подобных системах или в аналогичных ситуациях

Основные аспекты техники предугадывания ошибок

Интуиция и опыт: тестировщик использует свои знания и интуицию для определения мест в программе, где, по его мнению, с наибольшей вероятностью могут возникнуть ошибки

Знание типов типичных ошибок: тестировщик учитывает, какие ошибки чаще всего встречаются в подобных проектах, например, ошибки в обработке крайних значений, некорректное управление памятью, неправильная обработка ошибок и исключений, ошибки при работе с базой данных, неправильное управление состоянием и т. д
Техника предугадывания ошибок часто используется в сочетании с другими методами тестирования, такими как:
Анализ граничных значений (Boundary Value Analysis)
Эквивалентное разбиение (Equivalence Partitioning)
Исследовательское тестирование (Exploratory Testing)
Тестирование по чек-листу (Checklist-based Testing)

Анализ прошлых дефектов: изучение прошлых ошибок, найденных в аналогичных проектах, также может помочь предсказать, где могут возникнуть проблемы

Погружение в систему: чем больше тестировщик понимает особенности тестируемой системы, ее архитектуру и функциональность, тем точнее он сможет предугадать возможные ошибки

К преимуществам можно отнести: простоту использования, быструю оценку и эффективность.
Основной недостаток, о котором уже много раз упоминалось, — это зависимость от опыта и интуиции QA-инженера. Недостаток опыта может привести к неудаче.
Исследовательское тестирование
это одновременное изучение программного продукта, проектирование тестов и их исполнение.
По ISTQB исследовательское тестирование – это неформальный метод проектирования тестов, при котором тестировщик активно контролирует проектирование тестов в то время, как эти тесты выполняются, и использует полученную во время тестирования информацию для для проектирования новых и улучшенных тестов.
Если каждый следующий тест, который мы выполняем по результатам предыдущего теста, это означает, что мы используем исследовательское тестирование.


Когда следует применять  исследовательское тестирование?
Самые распространенные случаи:
 вам нужно обеспечить быструю обратную связь о новом продукте или фиче
 нужно быстро изучить продукт
 вы уже провели скриптовое тестирование и хотите разнообразить своё тестирование
 вам нужно найти самый важный баг в кратчайшие сроки
 вы хотите проверить работу другого тестировщика
 вам нужно обнаружить и локализовать дефект
 вам нужно изучить состояние конкретного риска для принятия решения о необходимости покрытия этой области скриптовыми тестами
Как организовать исследовательское тестирование?
Для управления исследовательским тестированием может использоваться Session-Based Test Management.
 В основе этой модели лежат:
·        Тестовые сессии – ограниченные промежутки времени, в рамках которых происходит тестирование‎. При этом каждая сессия имеет тему.
·        Отчеты по результатам сессий, оформленные в пригодной для парсинга и сбора статистики форме.
·        Обсуждение лидом и тестировщиком результатов проведенной сессии.

На основе чек-листов

Чек-лист — это список, содержащий ряд необходимых проверок для для тестирования продукта.

Преимущества использования чек-листов:

Улучшается представление о системе в целом, виден статус её готовности;
виден объём проделанной и предстоящей работы по тестированию;
легче не повторяться в проверках и не упустить ничего важного в процессе тестирования.

Можно выделить два вида чек-листов: специальные и универсальные.

Специальные чек-листы создаются и используются для конкретных проектов, поэтому пункты такого чек-листа соответствуют специфике проекта. 

Универсальные чек-листы подходят для тестирования проектов одного типа. Проверка по универсальному чек-листу не привязывается к графическим элементам или конкретной реализации. Проверяется сама возможность пользователя выполнить действие. Для универсального чек-листа составляется абстрактный список проверок.Универсальные чек-листы можно использовать повторно на проектах одного типа.

Преимущества и недостатки чек-листов
Преимущества:
чек-лист легко читается;
по чек-листу быстро тестировать: в тест-кейсе нужно отмечать статус каждого шага, в то время как в чек-листе достаточно одной строчки;
чек-лист — источник результатов для отчёта: можно быстро посчитать сколько проверок выполнено, в каком они статусе, узнать количество открытых репортов;
в любой момент можно узнать статус — всегда есть то, что нужно проверить в первую очередь, можно упорядочить пункты чек-листа или изменить порядок, когда это требуется.


Недостатки:

неопределенность тестового набора: каждый тестировщик выполняет пункт чек-листа по-своему;
неопределенность тестовых данных;
недостаточность детализации;
сложнее обучить начинающих сотрудников: пункты чек-листа чаще абстрагируются от конкретных элементов интерфейса и описывают то, что нужно сделать;
чек-лист менее эффективен для начинающих тестировщиков, лучше использовать тест-кейсы.

Таким образом, наилучший вариант для применения чек-листов — ранний этап разработки, когда когда софт быстро меняется и нет необходимости в более сложной документации. Чек-листы удобны в использовании, наглядны и полезны как тестировщикам, так и сторонним наблюдателям.

Какие знаете техники белого ящика?/Опишите их

Тестирование белого ящика —  это метод проверки программного обеспечения, который фокусируется на внутренней структуре и коде программы. Тестировщики имеют доступ к исходному коду и используют его для разработки тестовых сценариев.
Основная цель — проверить внутреннюю логику и структуру программы. 
Основные методы тестирования белого ящика включают:
Покрытие операторов (statement coverage) 
Покрытие решений (decision coverage) 
Покрытие условий (condition coverage)
Покрытие операторов
это техника тестирования программного обеспечения, целью которой является выполнение каждого оператора программы хотя бы один раз.

Оператор — это любая отдельная команда в программе, которая выполняет определенное действие. Это может быть присвоение значения переменной, ввод/вывод данных, вызов функции и так далее.
Покрытие операторов: означает, что мы пишем тесты таким образом, чтобы каждый оператор в программе был выполнен хотя бы один раз.

Покрытие операторов позволяет найти:

Неиспользованные выражения (Unused Statements);
Мертвый код (Dead Code);
Неиспользуемые ветви (Unused Branches);
Недостающие операторы (Missing Statements);
Коэффициент покрытия операторов

Вычисляется по формуле:


Где: 
S(Exercised) - это количество операторов, покрытых тестами. 
S(Total) - общее количество операторов.
SC=100% означает, что каждый оператор был выполнен хотя бы один раз.


Для определения того, сколько тестов потребуется, чтобы обеспечить 100% покрытие операторов нужно найти минимальное количество кратчайших путей, которое покроет все узлы блок-схемы.
Инструменты для покрытия операторов:

Cobertura (для Java) — анализатор покрытия кода, который помогает измерять покрытие операторов и условий.
JaCoCo (для Java) — популярный инструмент для анализа покрытия кода, который поддерживает покрытие операторов, ветвей и условий. (JUnit используется для написания и выполнения тестов, а JaCoCo — для анализа покрытия кода)
Coverage.py (для Python) — инструмент для измерения покрытия кода в Python, поддерживает покрытие операторов и других метрик.
SonarQube — это инструмент для анализа кода, который поддерживает различные метрики покрытия тестами, включая покрытие операторов.

Покрытие решений 

— это метод тестирования программ, который проверяет, чтобы каждая возможная ветвь решения в коде была выполнена хотя бы один раз.

Решения — это логические конструкции, которые выбирают один из нескольких возможных путей выполнения программы в зависимости от условий. Наиболее распространенными примерами решений являются операторы if, else if и else, а также switch-выражения. 
Покрытие решений: это тестирование программы таким образом, чтобы каждая ветвь решения была выполнена хотя бы один раз. Другими словами, нужно протестировать и истинную ветвь (например, P > 100), и ложную (например, P <= 100).

Как проводятся тесты покрытия решений?
Каждая строка программы должна пройти через тестирование покрытия решений, чтобы найти любые потенциальные потоки принятия решений в кодах. Хорошо известно, что этот этап тестирования кода имеет решающее значение для процесса создания программ и разработки приложений. Пропуск этого этапа может серьезно снизить эффективность программы в этом модуле.

Коэффициент покрытия решений вычисляется по формуле:
*    100%
                                                                                                                                                     
где Number of Decision Outcomes Excercised – это кол-во реализованных результатов решений, покрытых тестами, 
а,Total Number of Decision Oucomes – общее кол-во результатов решений
Покрытие условий
— это тип тестирования, который проверяет все условные выражения в программе для всех возможных результатов условий. Его также называют покрытием предикатов .
Оно гарантирует, что тестирование включает выполнение обеих ветвей в решении, как оператор if. Если точка принятия решения имеет разные условия (используя AND или OR), покрытие условий гарантирует, что мы протестировали все различные комбинации условий.
Условия —  это логическое выражение, которое возвращает либо true (истина), либо false (ложь). Условия используются в решениях для определения, какой путь выполнения программы выбрать.
Покрытие условий: это тестирование таким образом, чтобы каждая часть сложного условия (каждое подусловие) была проверена на истинность и ложность независимо от других частей условия.

Как работает покрытие условий?
Определение точек принятия решений : первым шагом является определение точек принятия решений в коде, обычно представленных условными операторами, такими как if, else if, и else.
Анализ условий : Каждая точка принятия решения может содержать несколько условий, которые оцениваются для определения пути выполнения. Важно проанализировать эти условия и разбить их на более простые компоненты, чтобы обеспечить комплексное тестирование.
Создание тестовых случаев : Тестовые случаи создаются для покрытия обоих возможных результатов каждого условия – true и false. Это гарантирует, что все ветви кода будут проверены во время тестирования.
Выполнение тестов и генерация отчетов : выполняется тестовый набор и генерируется отчет о покрытии для оценки степени достигнутого покрытия условий. Отчет выделяет протестированные и непроверенные условия, что облегчает дальнейшее уточнение тестовых случаев.
Как рассчитывается покрытие условий?
Коэффициент покрытия условий вычисляется по формуле:
                                                                                                                                                          *    100%

где Number of Executed Operands - Количество проверенных состояний условий
Total Number of Operands - Общее количество состояний условий
Преимущества покрытия условий
1.	Обеспечивает комплексное тестирование : гарантирует, что все условия в нашем коде проверены, что снижает вероятность пропущенных ошибок.
2.	Раннее обнаружение ошибок : тщательно тестируя все возможные условия, мы можем обнаруживать и исправлять ошибки на ранних этапах процесса разработки.
3.	Улучшает качество ПО : Тщательное тестирование приводит к более надежному и поддерживаемому ПО. Это помогает нам соответствовать стандартам качества и снижает риск ошибок.
4.	Эффективное устранение неполадок : хорошо проверенные условия облегчают поиск и устранение проблем, ускоряя процесс устранения неполадок.
5.	Повышенная уверенность : осознание того, что все условия были проверены, дает нам большую уверенность в надежности нашего кода.



Таблица различий



Покрытие операторов
Покрытие решений/альтернатив
Покрытие условий
Количество тестов
Минимальное. Требует тестов для выполнения каждого оператора хотя бы один раз.
Умеренное. Требует тестов для каждого возможного решения (True и False) каждого логического выражения.
Большее. Требует тестов для всех возможных состояний (True и False) каждого отдельного условия.
Глубина проверки
Поверхностная. Обеспечивает базовое выполнение кода без учета всех ветвей или условий.
Средняя. Охватывает все ветви выполнения, но не все возможные комбинации условий.
Глубокая. Проверяет каждое условие независимо, но не все комбинации условий.
Риск пропуска ошибок
Высокий. Может пропустить критические ошибки, связанные с непроверенными ветвями или условиями.
Средний. Может пропустить ошибки, связанные с комбинациями отдельных условий.
Меньший. Однако может упустить ошибки, если они зависят от специфических комбинаций условий.



 
























